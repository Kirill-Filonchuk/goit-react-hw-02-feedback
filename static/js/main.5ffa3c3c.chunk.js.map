{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/App/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","console","log","Object","entries","map","key","val","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","handleDecrement","e","target","setState","totalCount","positivPerc","Math","floor","className","this","shortid","generate","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SASeA,EATC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,oCACI,6BAAKD,IACJC,M,OCQMC,EATS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAGhC,OAFCC,QAAQC,IAAIH,GAELI,OAAOC,QAAQL,GAASM,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YAC/B,yBAAkBC,KAAK,SAASC,KAAMH,EAAKI,QAASV,EAApD,UAAsEM,EAAtE,IAA2E,+BAAOC,MAArED,OCLfK,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASf,EAAZ,EAAYA,SAAZ,OACjB,gCACA,6BAAKe,IACAf,MAwBMgB,EApBI,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,mBAG3C,OAFAjB,QAAQC,IAAI,CAACY,OAAMC,UAASC,QAGxB,qCACI,4CACCC,EAAQ,EAAM,gCACdd,OAAOC,QAAQ,CAAEU,OAAMC,UAASC,QAAOX,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YACxC,8BAAeD,EAAf,KAAqB,+BAAOC,MAApBD,MAEZ,wCAAwB,+BAAOW,MAAvB,SACR,oDAAsC,+BAAOC,MAArC,cACG,cAAC,EAAD,CAAcN,QAAS,0BCwC/BO,E,4MApDbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,gBAAkB,SAAAC,GAChBrB,QAAQC,IAAIoB,EAAEC,OAAOd,MAErB,EAAKe,UAAS,iCACXF,EAAEC,OAAOd,KAAO,EAAKW,MAAME,EAAEC,OAAOd,MAAQ,O,EAIjDgB,WAAa,WACX,MAA+B,EAAKL,MAGpC,OAHA,EAAQN,KAAR,EAAcC,QAAd,EAAuBC,K,EAMzBE,mBAAqB,WAEnB,GADAjB,QAAQC,IAAI,EAAKuB,cACb,EAAKA,aAAe,EAAG,CACzB,IAAMC,EAAcC,KAAKC,MAAyB,IAAlB,EAAKR,MAAMN,KAAc,EAAKW,cAE9D,OADAxB,QAAQC,IAAIwB,GACLA,EAKT,OAAO,G,4CAGT,WACE,OACE,qBAA8BG,UAAU,YAAxC,SACE,eAAC,EAAD,CAASjC,MAAO,wBAAhB,UACE,cAAC,EAAD,CAAiBG,QAAS+B,KAAKV,MAAOpB,gBAAiB8B,KAAKT,kBAC5D,cAAC,EAAD,CACEP,KAAMgB,KAAKV,MAAMN,KACjBC,QAASe,KAAKV,MAAML,QACpBC,IAAKc,KAAKV,MAAMJ,IAChBC,MAAOa,KAAKL,aACZP,mBAAoBY,KAAKZ,2BARrBa,IAAQC,gB,GArCNC,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5ffa3c3c.chunk.js","sourcesContent":["const Section = ({ title, children }) => (\r\n    <section>\r\n        <h1>{title}</h1>\r\n        {children}\r\n    </section>\r\n    \r\n);\r\n\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\r\n    console.log(options);\r\n   \r\n   return( Object.entries(options).map(([key, val]) => (\r\n        <button key={key} type=\"button\" name={key} onClick={onLeaveFeedback}>{key}:<span>{val}</span></button>\r\n   ))\r\n   )\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","\r\nconst Notification = ({ message, children }) => (\r\n    <div>\r\n    <h4>{message}</h4>\r\n        {children}\r\n        </div>\r\n);\r\n\r\nconst Statistics = ({good, neutral, bad, total,positivePercentage}) => {\r\n    console.log({good, neutral, bad});\r\n   \r\n    return (\r\n        <>\r\n            <h2>Statistics</h2>\r\n            {total > 0 ? ( <div>\r\n            {Object.entries({ good, neutral, bad }).map(([key, val]) => (\r\n                <p key={key} >{key}: <span>{val}</span></p>\r\n            ))}\r\n            <p key={'total'}>Total: <span>{total}</span></p>\r\n            <p key={'percent'}>Positive feedback: <span>{positivePercentage}</span></p>\r\n            </div>) : (<Notification message={\"No feedback given\"} />)\r\n         \r\n            }\r\n           \r\n        </>)\r\n}\r\n\r\n\r\nexport default Statistics;\r\n","import '../App/App.css';\r\nimport React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport Section from '../Section';\r\nimport FeedbackOptions from '../FeedbackOptions';\r\nimport Statistics from '../Statistics';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleDecrement = e => {\r\n    console.log(e.target.name);\r\n\r\n    this.setState(() => ({\r\n      [e.target.name]: this.state[e.target.name] + 1,\r\n    }));\r\n  };\r\n\r\n  totalCount = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n    // console.log(this.state.good);\r\n    return total;\r\n  };\r\n\r\n  positivePercentage = () => {\r\n    console.log(this.totalCount());\r\n    if (this.totalCount() > 0) {\r\n      const positivPerc = Math.floor((this.state.good * 100) / this.totalCount());\r\n      console.log(positivPerc);\r\n      return positivPerc;\r\n    }\r\n    // or to the string - so, we can do whith out isNaN\r\n    // const positivPerc = `${Math.floor((this.state.good * 100) / this.totalCount())}`;\r\n    // console.log(positivPerc.length);\r\n    return 0;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div key={shortid.generate()} className=\"container\">\r\n        <Section title={'Please leave feedback'}>\r\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.handleDecrement} />\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.totalCount()}\r\n            positivePercentage={this.positivePercentage()}\r\n          />\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App.js';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}